require 'test_helper'

module LetterKnife::Parser
  class EmbeddedHeaderTest < ActiveSupport::TestCase
    test "skips if less than 2 headers" do
      text = <<~MESSAGE
        From: Tom Ward <tom@example.com>

        Hello
      MESSAGE

      assert_nil EmbeddedHeader.parse(text)
    end

    test "skips if no from header found" do
      text = <<~MESSAGE
        Not-From: Tom Ward <tom@example.com>
        Subject: This is a really long subject which, when sent as an embedded header
        To: a@example.com

        Hello
      MESSAGE

      assert_nil EmbeddedHeader.parse(text)
    end

    test "parses headers with multiline entries" do
      text = <<~MESSAGE
        From: Tom Ward <tom@example.com>
        Subject: This is a really long subject which, when sent as an embedded header
        will be split across multiple lines
        To: a@example.com

        Hello
      MESSAGE

      header = <<~HEADER
        From: Tom Ward <tom@example.com>
        Subject: This is a really long subject which, when sent as an embedded header
        will be split across multiple lines
        To: a@example.com

      HEADER

      assert_equal header, EmbeddedHeader.parse(text)[:header]
    end

    test "parses headers surrounded by stars, as seen generated by Outlook 2013" do
      text = <<~MESSAGE
        *From:* Tom Ward <tom@example.com>
        *Subject:* Subject
        *To:* a@example.com

        Hello
      MESSAGE

      header = <<~HEADER
        *From:* Tom Ward <tom@example.com>
        *Subject:* Subject
        *To:* a@example.com

      HEADER

      assert_equal header, EmbeddedHeader.parse(text)[:header]
    end

    test "parses whatever the fuck this is" do
      text = <<~MESSAGE
        From: Tom Ward <tom@example.com>
        Subject: Subject
        To: a@example.com

        First:
          A
        Second:
          B
        Third:
          C
      MESSAGE

      header = <<~HEADER
        From: Tom Ward <tom@example.com>
        Subject: Subject
        To: a@example.com

      HEADER

      assert_equal header, EmbeddedHeader.parse(text)[:header]
    end

    test "parses headers with blank lines between entries" do
      text = <<~MESSAGE
        From: Tom Ward <tom@example.com>

        Subject: This is a subject

        To: a@example.com

        Hello
      MESSAGE

      header = <<~HEADER
        From: Tom Ward <tom@example.com>

        Subject: This is a subject

        To: a@example.com
      HEADER

      assert_equal header.strip, EmbeddedHeader.parse(text)[:header].strip
    end

    test "does not match urls as headers" do
      text = <<~MESSAGE
        From: Tom Ward <tom@example.com>
        Subject: This is a subject
        To: a@example.com

        https://example.com/url
      MESSAGE

      header = <<~HEADER
        From: Tom Ward <tom@example.com>
        Subject: This is a subject
        To: a@example.com
      HEADER

      assert_equal header.strip, EmbeddedHeader.parse(text)[:header].strip
    end

    HeaderFixtures::OUTLOOK_2016_EMBEDDED_HEADERS.each do |language, header|
      test "parses outlook-style header in #{language}" do
        text = <<~MESSAGE
          #{header}

          Hello
        MESSAGE

        header = <<~HEADER
          #{header}

        HEADER

        assert_equal header, EmbeddedHeader.parse(text)[:header]
      end
    end

    HeaderFixtures::CONTRIVED_EMBEDDED_HEADERS.each do |name, header|
      test "parses header #{name}" do
        text = <<~MESSAGE
          #{header}

          Hello
        MESSAGE

        header = <<~HEADER
          #{header}

        HEADER

        assert_equal header, EmbeddedHeader.parse(text)[:header]
      end
    end
  end
end
